Index: app/src/main/java/com/example/pangchat/VideoPlayActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.pangchat\n\n\nimport android.content.Intent\nimport android.graphics.Bitmap\nimport android.graphics.BitmapFactory\nimport android.net.Uri\nimport androidx.appcompat.app.AppCompatActivity\nimport android.os.Bundle\nimport android.util.Log\nimport android.widget.*\nimport androidx.lifecycle.lifecycleScope\nimport com.example.pangchat.chat.data.ChatInfo\nimport com.example.pangchat.chat.data.ChatRequest\nimport com.example.pangchat.chat.data.ChatResult\nimport com.example.pangchat.utils.CookiedFuel\nimport com.example.pangchat.websocketClient.webSocketClient\nimport com.github.kittinunf.fuel.coroutines.awaitByteArray\nimport com.google.android.material.textfield.TextInputEditText\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.launch\nimport kotlinx.coroutines.withContext\n\nclass VideoPlayActivity : AppCompatActivity() {\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_video_play)\n        var videoView: VideoView = findViewById(R.id.videoView)\n\n        var url: String? = intent.getStringExtra(\"videoUrl\")\n\n        var mediaController: MediaController = MediaController(this)\n\n        /*\n        if(url != null) {\n            lifecycleScope.launch {\n                // 发起下载视频请求\n                val byteArray = ByteArray\n                withContext(Dispatchers.IO) {\n                    val result = CookiedFuel.get(url).awaitByteArray();\n                    bit = BitmapFactory.decodeByteArray(result, 0, result.size)\n                }\n\n            }\n        }\n\n         */\n\n\n        if(url != null){\n            videoView.setVideoURI(Uri.parse(\"http://183.172.182.59:7000/test/1624397853917_4864.mp4\"))\n            // videoView.set\n        }\n        mediaController.setMediaPlayer(videoView)\n        videoView.setMediaController(mediaController)\n        videoView.start()\n        /*\n        val back = findViewById<ImageView>(R.id.chatnameModifyBackward)\n        back.setOnClickListener {\n            this.finish()\n        }\n\n        val chatname: String? = intent.getStringExtra(\"chatName\")\n        val input = findViewById<TextInputEditText>(R.id.chatnameInput)\n        if(chatname != null){\n            input.setText(chatname)\n        }\n\n        var chatId: String? = intent.getStringExtra(\"chatId\")\n        val btn = findViewById<Button>(R.id.chatnameModifyBtn)\n        btn.setOnClickListener {\n            if(input.text?.length != 0){\n                modify(chatId!!, input.text.toString())\n                val intent = Intent(this, ChatInfoActivity::class.java)\n                intent.putExtra(\"chatId\", chatId)\n                intent.putExtra(\"chatName\", input.text.toString())\n                try {\n                    startActivity(intent)\n                    this.finish()\n                } catch (ActivityNotFoundException: Exception) {\n                    Log.d(\"ImplicitIntents\", \"Can't handle this!\")\n                }\n            }else{\n                Toast.makeText(this, \"不可将群聊名置为空\", Toast.LENGTH_LONG).show()\n            }\n        }\n        */\n    }\n\n    /*\n    private fun modify(chatId: String, value: String){\n        lifecycleScope.launch {\n            modifyChatname(chatId, value)\n        }\n    }\n\n    private suspend fun modifyChatname(chatId: String, value: String): Boolean{\n        val chatRequest = ChatRequest()\n        val result: ChatResult<ChatInfo>\n\n        withContext(Dispatchers.IO) {\n            result = chatRequest.chatModify(chatId, \"chatName\",value)\n        }\n\n        if (result is ChatResult.Success) {\n            Log.d(\"chat\", \"success\")\n        } else {\n            // TODO：抛出并解析异常\n        }\n\n        return result is ChatResult.Success\n    }\n\n     */\n\n\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/example/pangchat/VideoPlayActivity.kt	(revision 8ee0a4d1eae9deefb67596172ac4c02ef6f3328b)
+++ app/src/main/java/com/example/pangchat/VideoPlayActivity.kt	(date 1624415822271)
@@ -1,31 +1,21 @@
 package com.example.pangchat
 
 
-import android.content.Intent
-import android.graphics.Bitmap
-import android.graphics.BitmapFactory
 import android.net.Uri
-import androidx.appcompat.app.AppCompatActivity
 import android.os.Bundle
-import android.util.Log
-import android.widget.*
-import androidx.lifecycle.lifecycleScope
-import com.example.pangchat.chat.data.ChatInfo
-import com.example.pangchat.chat.data.ChatRequest
-import com.example.pangchat.chat.data.ChatResult
-import com.example.pangchat.utils.CookiedFuel
+import android.widget.MediaController
+import android.widget.VideoView
+import androidx.appcompat.app.AppCompatActivity
 import com.example.pangchat.websocketClient.webSocketClient
-import com.github.kittinunf.fuel.coroutines.awaitByteArray
-import com.google.android.material.textfield.TextInputEditText
-import kotlinx.coroutines.Dispatchers
-import kotlinx.coroutines.launch
-import kotlinx.coroutines.withContext
 
 class VideoPlayActivity : AppCompatActivity() {
 
     override fun onCreate(savedInstanceState: Bundle?) {
         super.onCreate(savedInstanceState)
         setContentView(R.layout.activity_video_play)
+
+        webSocketClient.context = this
+
         var videoView: VideoView = findViewById(R.id.videoView)
 
         var url: String? = intent.getStringExtra("videoUrl")
Index: app/src/main/java/com/example/pangchat/ChatnameModifyActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.pangchat\n\n\nimport android.content.Intent\nimport androidx.appcompat.app.AppCompatActivity\nimport android.os.Bundle\nimport android.util.Log\nimport android.widget.*\nimport androidx.lifecycle.lifecycleScope\nimport com.example.pangchat.chat.data.ChatInfo\nimport com.example.pangchat.chat.data.ChatRequest\nimport com.example.pangchat.chat.data.ChatResult\nimport com.google.android.material.textfield.TextInputEditText\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.launch\nimport kotlinx.coroutines.withContext\n\nclass ChatnameModifyActivity : AppCompatActivity() {\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_chatname_modify)\n\n        val back = findViewById<ImageView>(R.id.chatnameModifyBackward)\n        back.setOnClickListener {\n            this.finish()\n        }\n\n        val chatname: String? = intent.getStringExtra(\"chatName\")\n        val input = findViewById<TextInputEditText>(R.id.chatnameInput)\n        if(chatname != null){\n            input.setText(chatname)\n        }\n\n        var chatId: String? = intent.getStringExtra(\"chatId\")\n        val btn = findViewById<Button>(R.id.chatnameModifyBtn)\n        btn.setOnClickListener {\n            if(input.text?.length != 0){\n                modify(chatId!!, input.text.toString())\n                val intent = Intent(this, ChatInfoActivity::class.java)\n                intent.putExtra(\"chatId\", chatId)\n                intent.putExtra(\"chatName\", input.text.toString())\n                try {\n                    startActivity(intent)\n                    this.finish()\n                } catch (ActivityNotFoundException: Exception) {\n                    Log.d(\"ImplicitIntents\", \"Can't handle this!\")\n                }\n            }else{\n                Toast.makeText(this, \"不可将群聊名置为空\", Toast.LENGTH_LONG).show()\n            }\n        }\n    }\n\n    private fun modify(chatId: String, value: String){\n        lifecycleScope.launch {\n            modifyChatname(chatId, value)\n        }\n    }\n\n    private suspend fun modifyChatname(chatId: String, value: String): Boolean{\n        val chatRequest = ChatRequest()\n        val result: ChatResult<ChatInfo>\n\n        withContext(Dispatchers.IO) {\n            result = chatRequest.chatModify(chatId, \"chatName\",value)\n        }\n\n        if (result is ChatResult.Success) {\n            Log.d(\"chat\", \"success\")\n        } else {\n            // TODO：抛出并解析异常\n        }\n\n        return result is ChatResult.Success\n    }\n\n\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/example/pangchat/ChatnameModifyActivity.kt	(revision 8ee0a4d1eae9deefb67596172ac4c02ef6f3328b)
+++ app/src/main/java/com/example/pangchat/ChatnameModifyActivity.kt	(date 1624415822348)
@@ -2,14 +2,17 @@
 
 
 import android.content.Intent
-import androidx.appcompat.app.AppCompatActivity
 import android.os.Bundle
 import android.util.Log
-import android.widget.*
+import android.widget.Button
+import android.widget.ImageView
+import android.widget.Toast
+import androidx.appcompat.app.AppCompatActivity
 import androidx.lifecycle.lifecycleScope
 import com.example.pangchat.chat.data.ChatInfo
 import com.example.pangchat.chat.data.ChatRequest
 import com.example.pangchat.chat.data.ChatResult
+import com.example.pangchat.websocketClient.webSocketClient
 import com.google.android.material.textfield.TextInputEditText
 import kotlinx.coroutines.Dispatchers
 import kotlinx.coroutines.launch
@@ -21,6 +24,8 @@
         super.onCreate(savedInstanceState)
         setContentView(R.layout.activity_chatname_modify)
 
+        webSocketClient.context = this
+
         val back = findViewById<ImageView>(R.id.chatnameModifyBackward)
         back.setOnClickListener {
             this.finish()
Index: app/src/main/java/com/example/pangchat/websocketClient/MyWebSocketClient.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.pangchat.websocketClient\n\nimport android.app.Notification\nimport android.app.NotificationChannel\nimport android.app.NotificationManager\nimport android.content.Context\nimport android.content.Context.NOTIFICATION_SERVICE\nimport androidx.core.app.NotificationCompat\nimport com.alibaba.fastjson.JSON\nimport com.example.pangchat.R\nimport com.google.gson.Gson\nimport com.google.gson.JsonSyntaxException\nimport org.java_websocket.client.WebSocketClient\nimport org.java_websocket.handshake.ServerHandshake\nimport java.net.URI\n\n// 全局变量，所有组件共享此websocket client\nlateinit var webSocketURI: URI\nlateinit var webSocketClient: MyWebSocketClient\n\nclass MyWebSocketClient(uri: URI) : WebSocketClient(uri) {\n    // var hasNewFriend : Boolean = false\n    var userId:String? = null\n    var username:String?=null\n    var password:String?=null\n    lateinit var context: Context\n\n    data class friend(val friendId: String, val friendName: String)\n\n\n    override fun onOpen(handshakedata: ServerHandshake?) {\n        send(JSON.toJSONString(mapOf(\"bizType\" to \"USER_LOGIN\", \"username\" to username, \"password\" to password)))\n    }\n\n    override fun onMessage(message: String?) {\n        // 将message转为json类型，然后对其中的业务类型做各种条件判断\n        var arr: MutableList<MutableMap<String, *>>\n        try {\n            @Suppress(\"UNCHECKED_CAST\")\n            arr = Gson().fromJson(message, MutableList::class.java) as MutableList<MutableMap<String, *>>\n        } catch (e:JsonSyntaxException){\n            val obj = Gson().fromJson(message, MutableMap::class.java)\n            @Suppress(\"UNCHECKED_CAST\")\n            arr = mutableListOf(obj as MutableMap<String, *>)\n        }\n        for (obj in arr) {\n\n            // 有新的好友申请\n            if (obj.get(\"bizType\") == \"USER_ADD_FRIEND\") {\n                val name: String = obj.get(\"friendName\") as String\n                val Id: String = obj.get(\"friendId\") as String\n                sendSimpleNotification(\"新好友提醒\", \"$name 请求添加你为好友\")\n\n            }\n        }\n\n\n\n\n    }\n\n    override fun onClose(code: Int, reason: String?, remote: Boolean) {\n        print(\"123\")\n    }\n\n    override fun onError(ex: Exception?) {\n        print(ex)\n    }\n\n\n    fun sendSimpleNotification(title: String, text: String) {\n        val manager: NotificationManager = context.getSystemService(NOTIFICATION_SERVICE) as NotificationManager\n        val channelId: String = \"pangchat\";\n        val channel = NotificationChannel(channelId,\"pangchat\",\n            NotificationManager.IMPORTANCE_DEFAULT);\n        manager.createNotificationChannel(channel);\n        val notification: Notification = NotificationCompat.Builder(context,channelId)\n            .setContentTitle(title)\n            .setContentText(text)\n            .setWhen(System.currentTimeMillis())\n            .setSmallIcon(R.drawable.avatar1)\n            .build();\n        manager.notify(1,notification);\n    }\n\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/example/pangchat/websocketClient/MyWebSocketClient.kt	(revision 8ee0a4d1eae9deefb67596172ac4c02ef6f3328b)
+++ app/src/main/java/com/example/pangchat/websocketClient/MyWebSocketClient.kt	(date 1624416070772)
@@ -50,8 +50,13 @@
                 val name: String = obj.get("friendName") as String
                 val Id: String = obj.get("friendId") as String
                 sendSimpleNotification("新好友提醒", "$name 请求添加你为好友")
+            }
+            else if (obj.get("bizType") == "MESSAGE_SEND") {
+                val name: String = obj.get("senderName") as String
+                val Id: String = obj.get("senderId") as String
+                sendSimpleNotification("新消息提醒", "$name 发送了一条消息")
+            }
 
-            }
         }
 
 
Index: app/src/main/java/com/example/pangchat/newPostActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.pangchat\n\nimport android.content.Context\nimport android.content.Intent\nimport android.graphics.Color\nimport android.os.Bundle\nimport android.util.Log\nimport android.view.View\nimport android.view.inputmethod.InputMethodManager\nimport android.widget.*\nimport androidx.appcompat.app.AppCompatActivity\nimport androidx.lifecycle.lifecycleScope\nimport com.example.pangchat.discover.data.DiscoverRequest\nimport com.example.pangchat.discover.data.DiscoverResult\nimport com.example.pangchat.discover.data.sendPostResult\nimport com.example.pangchat.message.data.MessageRequest\nimport com.example.pangchat.message.data.MessageResp\nimport com.example.pangchat.message.data.MessageResult\nimport com.example.pangchat.websocketClient.webSocketClient\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.launch\nimport kotlinx.coroutines.withContext\nimport java.util.*\nimport kotlin.collections.ArrayList\n\n//FIXME:纯图片存在问题\nclass newPostActivity  : AppCompatActivity() {\n    private var userId: String? = null\n    private var content:String? = null\n    private var images:ArrayList<String>? = null\n    private var imageViewList:ArrayList<ImageView>?= null\n    private var deleteViewList:ArrayList<ImageView>?=null\n    private var text:EditText?=null\n\n    override fun onCreate(savedInstanceState: Bundle?){\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_new_post)\n        userId = intent.getStringExtra(\"userId\")\n\n        val back = findViewById<ImageView>(R.id.goback)\n        val post = findViewById<Button>(R.id.button_post)\n        text = findViewById<EditText>(R.id.post_text)\n\n        imageViewList = ArrayList()\n        imageViewList!!.add(findViewById(R.id.add_image_0))\n        imageViewList!!.add(findViewById(R.id.add_image_1))\n        imageViewList!!.add(findViewById(R.id.add_image_2))\n        imageViewList!!.add(findViewById(R.id.add_image_3))\n\n        deleteViewList = ArrayList()\n        deleteViewList!!.add(findViewById(R.id.delete_image_0))\n        deleteViewList!!.add(findViewById(R.id.delete_image_1))\n        deleteViewList!!.add(findViewById(R.id.delete_image_2))\n        deleteViewList!!.add(findViewById(R.id.delete_image_3))\n\n\n        images = ArrayList()\n\n//        text?.onFocusChangeListener = View.OnFocusChangeListener() { view: View, b: Boolean ->\n//            //当EditText失去焦点时，隐藏软键盘\n//                if (!b) {\n//                    closeKeyBoard()\n//                }\n//\n//        };\n\n        for(i in 1..3){\n            imageViewList!![i].visibility=View.GONE\n        }\n\n        for(x in deleteViewList!!){\n            x.visibility=View.GONE\n        }\n\n        back.setOnClickListener(View.OnClickListener {\n            val back_intent = Intent(this, MainActivity::class.java)\n            back_intent.putExtra(\"fragment\",\"discover\")\n            try {\n                startActivity(back_intent)\n                finish()\n            } catch (e: Exception) {\n                Log.d(\"ImplicitIntents\", \"Can't handle this!\")\n            }\n        })\n\n        post.setBackgroundColor(Color.parseColor(\"#EEEEEE\"))\n        post.isEnabled=false\n        post.setOnClickListener {\n            lifecycleScope.launch {\n                content?.let { it1 -> sendPost(images!!, it1) }\n            }\n            val post_intent = Intent(this, MainActivity::class.java)\n            post_intent.putExtra(\"fragment\",\"discover\")\n            try {\n                startActivity(post_intent)\n                finish()\n            } catch (e: Exception) {\n                Log.d(\"ImplicitIntents\", \"Can't handle this!\")\n            }\n        }\n\n        (text as EditText?)?.afterTextChanged {\n            content = it\n            if(content!=\"\"){\n                post.background= getDrawable(R.drawable.btstyle)\n                post.isEnabled=true\n            } else if(images!!.isEmpty()){\n                post.isEnabled = false\n                post.setBackgroundColor(Color.parseColor(\"#EEEEEE\"))\n            }\n        }\n\n\n\n        for(i in 0..3){\n            imageViewList!![i].setOnClickListener {\n                //TODO 上传图片\n                //假设上传成功\n                //先随意设置一张图片\n                closeKeyBoard()\n                imageViewList!![i].setImageResource(R.drawable.image1)\n                images!!.add(\"1\")\n                deleteViewList!![i].visibility=View.VISIBLE\n                imageViewList!![i].isEnabled=false\n                if (i < 3) {\n                    imageViewList!![i + 1].visibility = View.VISIBLE\n                }\n                if (!images?.isEmpty()!!) {\n                    post.background = getDrawable(R.drawable.btstyle)\n                    post.isEnabled = true\n                }\n            }\n        }\n\n        for(i in 0..3){\n            deleteViewList!![i].setOnClickListener {\n                closeKeyBoard()\n                images!!.removeAt(i)\n\n\n                for (j in 0..(images!!.size - 1)) {\n                    imageViewList!![j].setImageResource(R.drawable.image1)\n                }\n                imageViewList!![images!!.size].setImageResource(R.drawable.ic_add1)\n                deleteViewList!![images!!.size].visibility = View.GONE\n                imageViewList!![images!!.size].isEnabled = true\n                for (j in (images!!.size + 1)..3) {\n                    imageViewList!![j].visibility = View.GONE\n                    deleteViewList!![j].visibility = View.GONE\n                }\n\n                if (images!!.isEmpty() && content == \"\") {\n                    post.setBackgroundColor(Color.parseColor(\"#EEEEEE\"))\n                    post.isEnabled = false\n                }\n            }\n        }\n    }\n\n    fun closeKeyBoard() {\n        val inputMethodManager: InputMethodManager = getSystemService(Context.INPUT_METHOD_SERVICE) as InputMethodManager\n        inputMethodManager.hideSoftInputFromWindow(\n            text?.getWindowToken(),\n            InputMethodManager.HIDE_NOT_ALWAYS\n        )\n    }\n\n    private suspend fun sendPost(images:ArrayList<String>,content: String){\n        val discoverRequest = DiscoverRequest()\n        val result: DiscoverResult<sendPostResult>\n\n        withContext(Dispatchers.IO) {\n            // FIXME: type\n            result = discoverRequest.sendPost(webSocketClient.userId!!, images, content)\n        }\n\n        if (result is DiscoverResult.Success) {\n            Toast.makeText(this, \"发送成功\", Toast.LENGTH_SHORT).show()\n        } else {\n            Log.d(\"ERROR\",result.toString())\n        }\n    }\n\n\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/example/pangchat/newPostActivity.kt	(revision 8ee0a4d1eae9deefb67596172ac4c02ef6f3328b)
+++ app/src/main/java/com/example/pangchat/newPostActivity.kt	(date 1624415822252)
@@ -7,21 +7,19 @@
 import android.util.Log
 import android.view.View
 import android.view.inputmethod.InputMethodManager
-import android.widget.*
+import android.widget.Button
+import android.widget.EditText
+import android.widget.ImageView
+import android.widget.Toast
 import androidx.appcompat.app.AppCompatActivity
 import androidx.lifecycle.lifecycleScope
 import com.example.pangchat.discover.data.DiscoverRequest
 import com.example.pangchat.discover.data.DiscoverResult
 import com.example.pangchat.discover.data.sendPostResult
-import com.example.pangchat.message.data.MessageRequest
-import com.example.pangchat.message.data.MessageResp
-import com.example.pangchat.message.data.MessageResult
 import com.example.pangchat.websocketClient.webSocketClient
 import kotlinx.coroutines.Dispatchers
 import kotlinx.coroutines.launch
 import kotlinx.coroutines.withContext
-import java.util.*
-import kotlin.collections.ArrayList
 
 //FIXME:纯图片存在问题
 class newPostActivity  : AppCompatActivity() {
@@ -35,6 +33,9 @@
     override fun onCreate(savedInstanceState: Bundle?){
         super.onCreate(savedInstanceState)
         setContentView(R.layout.activity_new_post)
+
+        webSocketClient.context = this
+
         userId = intent.getStringExtra("userId")
 
         val back = findViewById<ImageView>(R.id.goback)
Index: app/src/main/java/com/example/pangchat/ChatInfoActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.pangchat\n\n\nimport android.content.Intent\nimport android.os.Bundle\nimport android.util.Log\nimport android.widget.ImageView\nimport android.widget.LinearLayout\nimport android.widget.TextView\nimport androidx.appcompat.app.AppCompatActivity\nimport androidx.lifecycle.lifecycleScope\nimport androidx.recyclerview.widget.GridLayoutManager\nimport androidx.recyclerview.widget.RecyclerView\nimport com.example.pangchat.chat.Chat\nimport com.example.pangchat.chat.ChatMemberAdapter\nimport com.example.pangchat.chat.data.ChatRequest\nimport com.example.pangchat.chat.data.ChatResult\nimport com.example.pangchat.chat.data.ChatUserInfo\nimport com.example.pangchat.user.User\nimport com.example.pangchat.user.data.CommonResp\nimport com.example.pangchat.user.data.UserRequest\nimport com.example.pangchat.user.data.UserResult\nimport com.example.pangchat.websocketClient.webSocketClient\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.launch\nimport kotlinx.coroutines.withContext\nimport java.util.*\nimport kotlin.collections.ArrayList\n\nclass ChatInfoActivity : AppCompatActivity() {\n\n    var chat: Chat? = null\n    var members = LinkedList<User?>()\n\n    var chatName: TextView? = null\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_chat_info)\n\n        var chatId: String? = intent.getStringExtra(\"chatId\")\n\n\n        chatName = findViewById<TextView>(R.id.chatName)\n        val recyclerView = findViewById<RecyclerView>(R.id.chatInfoMembersView)\n        recyclerView.adapter = ChatMemberAdapter(this, members)\n        val gridLayoutManager = GridLayoutManager(this, 5)\n        recyclerView.layoutManager = gridLayoutManager\n\n        if (chatId != null) {\n            Log.d(\"chatId\", chatId)\n            lifecycleScope.launch {\n                getChatMember(chatId)\n                runOnUiThread{\n                    if(chat != null){\n                        chatName?.text = chat!!.getChatName()\n                        members.add(User(\"-1\", \"-1\", \"-1\", \"-1\"))\n                        recyclerView.adapter?.notifyDataSetChanged()\n                        if(!chat!!.getIsGroup()){\n                            val chatNameLayout: LinearLayout = findViewById(R.id.chatNameLayout)\n                            chatNameLayout.visibility = View.GONE\n                            val chatAvatarLayout: LinearLayout = findViewById(R.id.chatAvatarLayout)\n                            chatAvatarLayout.visibility = View.GONE\n                            val chatLeaveLayout: LinearLayout = findViewById(R.id.chatLeaveLayout)\n                            chatLeaveLayout.visibility = View.GONE\n                        }\n                    }\n                }\n            }\n        }\n\n        val back = findViewById<ImageView>(R.id.chatInfoBackward)\n        back.setOnClickListener {\n            if(chatId != null){\n                Log.d(\"click chatid: \", chatId)\n                val intent = Intent(this, ChatActivity::class.java)\n                intent.putExtra(\"chatId\", chatId)\n                try {\n                    this.startActivity(intent)\n                    this.finish()\n                } catch (ActivityNotFoundException: Exception) {\n                    Log.d(\"ImplicitIntents\", \"Can't handle this!\")\n                }\n            }\n        }\n\n        val leave = findViewById<LinearLayout>(R.id.chatLeaveLayout)\n        var success: Boolean ? = null\n        leave.setOnClickListener {\n            lifecycleScope.launch {\n                if(chatId != null && leaveChat(chatId)){\n                    activityFinish()\n                }\n            }\n        }\n\n        val chatName = findViewById<LinearLayout>(R.id.chatNameLayout)\n        chatName.setOnClickListener {\n            if(chatId != null){\n                val intent = Intent(this, ChatnameModifyActivity::class.java)\n                intent.putExtra(\"chatId\", chatId)\n                intent.putExtra(\"chatName\", chat?.getChatName())\n                try {\n                    this.startActivity(intent)\n                } catch (ActivityNotFoundException: Exception) {\n                    Log.d(\"ImplicitIntents\", \"Can't handle this!\")\n                }\n            }\n        }\n    }\n\n    override fun onResume() {\n        super.onResume()\n        val chatname = intent.getStringExtra(\"chatName\")\n        if(chatname != null){\n            chatName?.text = chatname\n        }\n    }\n\n    private suspend fun activityFinish(){\n        this.finish()\n    }\n\n    private suspend fun getChatMember(chatId: String){\n        val chatRequest = ChatRequest()\n        val result: ChatResult<ChatUserInfo>\n\n        withContext(Dispatchers.IO) {\n            result = chatRequest.getChatAndMembers(chatId)\n        }\n\n        if (result is ChatResult.Success) {\n            chat = result.data.chat\n            for(user in result.data.members){\n                members.add(user)\n            }\n        } else {\n            // TODO：抛出并解析异常\n        }\n    }\n\n    private suspend fun leaveChat(chatId: String): Boolean{\n        val userRequest = UserRequest()\n        val result: UserResult<CommonResp>\n\n        withContext(Dispatchers.IO) {\n            var userId = ArrayList<String>()\n            userId.add(webSocketClient.userId!!)\n            result = userRequest.userChat(userId, chatId, \"leave\")\n        }\n\n        if (result is UserResult.Success) {\n            Log.d(\"chat\", \"success\")\n        } else {\n            // TODO：抛出并解析异常\n        }\n\n        return result is UserResult.Success\n    }\n\n    fun toAddChatMember(){\n        val intent = Intent(this, SelectFriendsActivity::class.java)\n        intent.putExtra(\"chatId\", chat?.getId())\n        intent.putStringArrayListExtra(\"members\", chat?.getMembers())\n        try {\n            this.startActivity(intent)\n            this.finish()\n        } catch (ActivityNotFoundException: Exception) {\n            Log.d(\"ImplicitIntents\", \"Can't handle this!\")\n        }\n    }\n\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/example/pangchat/ChatInfoActivity.kt	(revision 8ee0a4d1eae9deefb67596172ac4c02ef6f3328b)
+++ app/src/main/java/com/example/pangchat/ChatInfoActivity.kt	(date 1624415822233)
@@ -4,6 +4,7 @@
 import android.content.Intent
 import android.os.Bundle
 import android.util.Log
+import android.view.View
 import android.widget.ImageView
 import android.widget.LinearLayout
 import android.widget.TextView
@@ -38,6 +39,8 @@
         super.onCreate(savedInstanceState)
         setContentView(R.layout.activity_chat_info)
 
+        webSocketClient.context = this
+
         var chatId: String? = intent.getStringExtra("chatId")
 
 
Index: app/src/main/java/com/example/pangchat/ChatActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.pangchat\n\n\nimport android.Manifest\nimport android.app.Activity\nimport android.content.Context\nimport android.content.Intent\nimport android.content.pm.PackageManager\nimport android.graphics.Bitmap\nimport android.graphics.BitmapFactory\nimport android.location.Location\nimport android.location.LocationManager\nimport android.media.MediaRecorder\nimport android.net.Uri\nimport androidx.appcompat.app.AppCompatActivity\nimport android.os.Bundle\nimport android.os.Environment\nimport android.provider.MediaStore\nimport android.util.Log\nimport android.view.View\nimport android.widget.ImageView\nimport android.widget.LinearLayout\nimport android.widget.TextView\nimport android.widget.Toast\nimport androidx.core.app.ActivityCompat\nimport androidx.lifecycle.MutableLiveData\nimport androidx.lifecycle.lifecycleScope\nimport androidx.recyclerview.widget.LinearLayoutManager\nimport androidx.recyclerview.widget.RecyclerView\nimport com.example.pangchat.chat.Chat\nimport com.example.pangchat.chat.data.ChatMessageInfo\nimport com.example.pangchat.chat.data.ChatRequest\nimport com.example.pangchat.chat.data.ChatResult\nimport com.example.pangchat.fragment.data.FileDataSource\nimport com.example.pangchat.fragment.data.Result\nimport com.example.pangchat.fragment.data.UploadResult\nimport com.example.pangchat.message.Message\nimport com.example.pangchat.message.MessageAdapter\nimport com.example.pangchat.message.data.MessageRequest\nimport com.example.pangchat.message.data.MessageResp\nimport com.example.pangchat.message.data.MessageResult\nimport com.example.pangchat.utils.CookiedFuel\nimport com.example.pangchat.websocketClient.webSocketClient\nimport com.github.kittinunf.fuel.core.BlobDataPart\nimport com.github.kittinunf.fuel.core.DataPart\nimport com.github.kittinunf.fuel.coroutines.awaitByteArray\nimport com.google.android.material.textfield.TextInputEditText\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.MainScope\nimport kotlinx.coroutines.launch\nimport kotlinx.coroutines.withContext\nimport java.io.File\nimport java.io.IOException\nimport java.io.InputStream\nimport java.util.*\nimport kotlin.collections.ArrayList\n\n\nclass ChatActivity : AppCompatActivity() {\n\n    private var chat: Chat? = null\n\n    private var data: LinkedList<Message?>? = null\n\n    private var messages: ArrayList<Message>? = null\n\n    private var urlToBitmap: MutableMap<String, Bitmap> = mutableMapOf()\n\n    private var mediaType : String = \"image\"\n\n    private var chatId: String? = null\n\n    private var recyclerView: RecyclerView? = null\n\n    private var _uploadInfo = MutableLiveData<UploadResult>()\n\n    var mRecorder: MediaRecorder? = null\n\n    var isChecked: Boolean = false\n\n    // 相册选择回传码\n    val GALLERY_REQUEST_CODE = 1\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_chat)\n        chatId = intent.getStringExtra(\"chatId\")\n        recyclerView = findViewById(R.id.chatRecyclerView)\n        val chatinfo = findViewById<ImageView>(R.id.chatInfo)\n        data = LinkedList()\n        messages = ArrayList()\n        recyclerView?.adapter = MessageAdapter(webSocketClient.userId!!, this, data, urlToBitmap)\n        // 取得对应聊天的内容\n        lifecycleScope.launch {\n            if (chatId != null) {\n                getChatAndMessage(chatId!!)\n                if(messages != null){\n                    for(message in messages!!){\n                        data!!.add(message)\n                        if(!urlToBitmap.keys.contains(message.getAvatar())){\n                            downloadBitmap(message.getAvatar())\n                        }\n                    }\n                    recyclerView?.adapter?.notifyDataSetChanged()\n                    recyclerView?.scrollToPosition(messages!!.size - 1)\n                    runOnUiThread {\n                        val chatname = findViewById<TextView>(R.id.chatName)\n                        chatname.text = chat?.getChatName()\n                        if(chat != null && !chat!!.getIsGroup()) chatinfo.visibility = View.INVISIBLE\n                    }\n                }\n            }\n        }\n\n        val linearLayoutManager = LinearLayoutManager(this)\n        linearLayoutManager.orientation = LinearLayoutManager.VERTICAL\n        recyclerView?.layoutManager = linearLayoutManager\n\n        val back = findViewById<ImageView>(R.id.chatBackward)\n        back.setOnClickListener { this.finish() }\n\n        chatinfo.setOnClickListener {\n            if(chat != null){\n                if(chat!!.getIsGroup()){\n                    val intent = Intent(this, ChatInfoActivity::class.java)\n                    intent.putExtra(\"chatId\", chatId)\n                    try {\n                        startActivity(intent)\n                        this.finish()\n                    } catch (ActivityNotFoundException: Exception) {\n                        Log.d(\"ImplicitIntents\", \"Can't handle this!\")\n                    }\n                }\n            }\n        }\n\n        val chatInput = findViewById<TextInputEditText>(R.id.chatInput)\n\n        val chatMoreAction = findViewById<LinearLayout>(R.id.chatMoreLayout)\n\n        val videoSender = findViewById<ImageView>(R.id.chatVideo)\n        videoSender.setOnClickListener{\n            val pickIntent : Intent = Intent(Intent.ACTION_PICK,\n                MediaStore.Images.Media.EXTERNAL_CONTENT_URI);\n            pickIntent.setDataAndType(MediaStore.Images.Media.EXTERNAL_CONTENT_URI, \"video/*\")\n            mediaType = \"video\"\n            startActivityForResult(pickIntent, GALLERY_REQUEST_CODE);\n        }\n\n        val imageSender = findViewById<ImageView>(R.id.chatImage)\n        imageSender.setOnClickListener{\n            val pickIntent : Intent = Intent(Intent.ACTION_PICK,\n                MediaStore.Images.Media.EXTERNAL_CONTENT_URI);\n            pickIntent.setDataAndType(MediaStore.Images.Media.EXTERNAL_CONTENT_URI, \"image/*\")\n            mediaType = \"image\"\n            startActivityForResult(pickIntent, GALLERY_REQUEST_CODE);\n        }\n\n\n        val audioSender = findViewById<ImageView>(R.id.chatVoice)\n        audioSender.setOnClickListener {\n//            isChecked = !isChecked\n//            if (isChecked)\n//            {\n//                startRecord()\n//            }\n//            else\n//            {\n//                stopRecord()\n//            }\n            val intent = Intent(MediaStore.Audio.Media.RECORD_SOUND_ACTION)\n            startActivityForResult(intent, 0) //通过startActivityForResult获取音频录制的结果的路径\n        }\n\n\n\n\n        val chatAction = findViewById<ImageView>(R.id.chatAction)\n        chatAction.setOnClickListener {\n            if(chatInput.text?.isEmpty() == false){\n                Log.d(\"Debug\", \"not empty\")\n                lifecycleScope.launch {\n                    if (chatId != null) {\n                        sendMessage(chatInput.text.toString(), \"text\")\n                        recyclerView?.adapter?.notifyDataSetChanged()\n                        recyclerView?.scrollToPosition(data!!.size - 1)\n                        chatInput.text?.clear()\n                    }\n                }\n            }else{\n                if(chatMoreAction.visibility == View.VISIBLE){\n                    chatMoreAction.visibility = View.GONE\n                }else if(chatMoreAction.visibility == View.GONE) {\n                    chatMoreAction.visibility = View.VISIBLE\n                }\n            }\n        }\n\n        val chatLocation = findViewById<ImageView>(R.id.chatLocation)\n        chatLocation.setOnClickListener {\n\n            val location = getLocation()\n            if(location != null){\n                Toast.makeText(this, \"发送当前位置\", Toast.LENGTH_LONG).show()\n                lifecycleScope.launch {\n                    sendMessage(\n                        location.latitude.toString() + \";\" + location.longitude.toString(),\n                        \"location\"\n                    )\n                }\n            }else{\n                Toast.makeText(this, \"获取当前地理位置失败！请打开GPS或网络后再试一次。\", Toast.LENGTH_LONG).show()\n            }\n        }\n    }\n\n    override fun onResume() {\n        super.onResume()\n        Log.d(\"back: \", \"resume\")\n    }\n\n    private fun getLocation(): Location?{\n        val locationManager = getSystemService(Context.LOCATION_SERVICE) as LocationManager\n        if (ActivityCompat.checkSelfPermission(\n                this,\n                Manifest.permission.ACCESS_FINE_LOCATION\n            ) != PackageManager.PERMISSION_GRANTED && ActivityCompat.checkSelfPermission(\n                this,\n                Manifest.permission.ACCESS_COARSE_LOCATION\n            ) != PackageManager.PERMISSION_GRANTED\n        ) {\n            ActivityCompat.requestPermissions(\n                this, arrayOf(\n                    Manifest.permission.ACCESS_FINE_LOCATION,\n                    Manifest.permission.ACCESS_COARSE_LOCATION\n                ), 1\n            )\n            return null\n        }\n\n        var location = locationManager.getLastKnownLocation(LocationManager.GPS_PROVIDER)\n            if (location == null) {\n                Toast.makeText(this, \"空位置\", Toast.LENGTH_LONG).show()\n                location = locationManager.getLastKnownLocation(LocationManager.NETWORK_PROVIDER)\n                if (location == null) {\n                    Toast.makeText(this, \"网络位置为空\", Toast.LENGTH_LONG).show()\n                }\n                else {\n                    Toast.makeText(this, \"使用网络位置\", Toast.LENGTH_LONG).show()\n                }\n            }\n        // }\n        return location\n    }\n\n\n    @Override\n    override fun onRequestPermissionsResult(\n        requestCode: Int,\n        permissions: Array<out String>,\n        grantResults: IntArray\n    ) {\n        super.onRequestPermissionsResult(requestCode, permissions, grantResults)\n        if(requestCode == 1){\n\n            for(index in permissions.indices){\n                if (grantResults[index] == PackageManager.PERMISSION_GRANTED) {\n                    Toast.makeText(\n                        this,\n                        \"\" + \"权限\" + permissions[index] + \"申请成功\",\n                        Toast.LENGTH_SHORT\n                    ).show();\n                } else {\n                    Toast.makeText(\n                        this,\n                        \"\" + \"权限\" + permissions[index] + \"申请失败\",\n                        Toast.LENGTH_SHORT\n                    ).show();\n                }\n            }\n        }\n    }\n\n    fun startRecord() {\n        val REQUEST_CODE_CONTACT = 101;\n        val permissions : Array<String> = Array(3, { \"0\" })\n        permissions.set(0, Manifest.permission.RECORD_AUDIO)\n        permissions.set(1, Manifest.permission.WRITE_EXTERNAL_STORAGE)\n        permissions.set(2, Manifest.permission.READ_EXTERNAL_STORAGE)\n        //验证是否许可权限\n        for (str : String in permissions) {\n            if (this.checkSelfPermission(str) != PackageManager.PERMISSION_GRANTED) {\n                //申请权限\n                this.requestPermissions(permissions, REQUEST_CODE_CONTACT)\n            }\n        }\n\n        mRecorder = MediaRecorder()\n        mRecorder!!.setAudioSource(MediaRecorder.AudioSource.MIC)\n        mRecorder!!.setOutputFormat(MediaRecorder.OutputFormat.THREE_GPP)\n        mRecorder!!.setOutputFile(newFileName())\n        mRecorder!!.setAudioEncoder(MediaRecorder.AudioEncoder.AMR_NB)\n        try {\n            mRecorder!!.prepare()\n        } catch (e: IOException) {\n            // Log.e(LOG_TAG, \"prepare() failed\")\n        }\n        mRecorder!!.start()\n    }\n\n    fun stopRecord() {\n        mRecorder?.stop()\n        mRecorder?.release()\n        mRecorder = null\n    }\n\n    fun newFileName(): String {\n        // var mFileName: String? = Environment.getExternalStorageDirectory().absolutePath\n        val path: File? = getExternalFilesDir(Environment.DIRECTORY_MUSIC)\n        val s: Long = System.currentTimeMillis()\n        return path?.absolutePath + s.toString() + \".3gp\"\n    }\n\n    override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {\n        super.onActivityResult(requestCode, resultCode, data)\n        if (resultCode == Activity.RESULT_OK) {\n            if (requestCode == GALLERY_REQUEST_CODE){\n                try {\n                    //该uri是上一个Activity返回的\n                    val uri = data?.data;\n                    if(uri!=null) {\n                        // 向服务器发送请求\n                        MainScope().launch {\n                            val splited = uri.lastPathSegment!!.split(\"/\");\n                            val input: InputStream\n                            withContext(Dispatchers.IO) {\n                                input = getContentResolver()?.openInputStream(uri)!!\n                            }\n\n                            uploadFile(\n                                BlobDataPart(\n                                    input,\n                                    \"file\",\n                                    splited[splited.size - 1]\n                                ), uri\n                            )\n                            // if()\n                            /*\n                            withContext(Dispatchers.IO) {\n                                val result = CookiedFuel.get(_uploadInfo?.value!!.url).awaitByteArray()\n                                if(mediaType.compareTo(\"image\") == 0){\n                                    var bit: Bitmap = BitmapFactory.decodeByteArray(result, 0, result.size)\n\n                                }\n                                // MediaRecorder.VideoEncoder\n                                // bit = BitmapFactory.decodeByteArray(result, 0, result.size)\n                            }\n                             */\n                            // imageView?.setImageBitmap(bit) // 必须放在IO外面\n\n\n                        }\n                    }\n                } catch (e: Exception) {\n                    e.printStackTrace();\n                }\n\n            }\n        }\n    }\n\n\n    public fun setInput(text: String){\n        val chatInput = findViewById<TextInputEditText>(R.id.chatInput)\n        chatInput.setText(text)\n    }\n\n    suspend fun uploadFile(file: DataPart, uri: Uri) {\n        val fileDataSource = FileDataSource()\n\n        val result: Result<UploadResult>\n\n        withContext(Dispatchers.IO) {\n            result = fileDataSource.uploadFile(file)\n        }\n\n        if (result is Result.Success) {\n            _uploadInfo.value = result.data\n            if(mediaType.compareTo(\"image\") == 0){\n                var bit: Bitmap = BitmapFactory.decodeStream(contentResolver?.openInputStream(uri))\n                urlToBitmap!![_uploadInfo?.value!!.url] = bit\n                sendMessage(_uploadInfo?.value!!.url, \"image\")\n                recyclerView?.adapter?.notifyDataSetChanged()\n                recyclerView?.scrollToPosition(data!!.size - 1)\n            }else{\n                sendMessage(_uploadInfo?.value!!.url, \"video\")\n                recyclerView?.adapter?.notifyDataSetChanged()\n                recyclerView?.scrollToPosition(data!!.size - 1)\n            }\n        } else {\n            // TODO：抛出并解析异常\n        }\n    }\n\n    private suspend fun getChatAndMessage(chatId: String){\n        val chatRequest = ChatRequest()\n        val result: ChatResult<ChatMessageInfo>\n\n        withContext(Dispatchers.IO){\n            result = chatRequest.getMessagesOfChat(chatId)\n        }\n\n        if (result is ChatResult.Success) {\n            chat = result.data.chat\n            messages = result.data.records\n        } else {\n            Log.d(\"error: \", \"get chat info error\")\n            // TODO：抛出并解析异常\n        }\n    }\n\n    private suspend fun sendMessage(content: String, type: String){\n        val messageRequest = MessageRequest()\n        val result: MessageResult<MessageResp>\n\n        withContext(Dispatchers.IO) {\n            result = messageRequest.sendMessage(chatId!!, webSocketClient.userId!!, type, content)\n        }\n\n        if (result is MessageResult.Success) {\n            data?.add(result.data.message)\n        } else {\n            // TODO：抛出并解析异常\n        }\n    }\n\n    fun recallMessage(index: Int, messageId: String){\n        lifecycleScope.launch {\n            if(recallMessage(messageId)){\n                data?.get(index)?.setRecalled()\n                recyclerView?.adapter?.notifyDataSetChanged()\n            }\n        }\n    }\n\n    private suspend fun recallMessage(messageId: String) : Boolean{\n        val messageRequest = MessageRequest()\n        val result: MessageResult<MessageResp>\n\n        withContext(Dispatchers.IO) {\n            result = messageRequest.recallMessage(messageId)\n        }\n\n        return result is MessageResult.Success\n    }\n\n    fun deleteMessage(index: Int, messageId: String, userId: String){\n        lifecycleScope.launch {\n            if(deleteMessage(messageId, userId)){\n                data?.get(index)?.addBlocked(userId)\n                recyclerView?.adapter?.notifyDataSetChanged()\n            }\n        }\n    }\n\n    private suspend fun deleteMessage(messageId: String, userId: String): Boolean{\n        val messageRequest = MessageRequest()\n        val result: MessageResult<MessageResp>\n\n        withContext(Dispatchers.IO) {\n            result = messageRequest.deleteMessage(messageId, userId)\n        }\n\n        return result is MessageResult.Success\n    }\n\n    public fun downLoadImageBitmap(url: String){\n        lifecycleScope.launch {\n            downloadBitmap(url)\n            recyclerView?.adapter?.notifyDataSetChanged()\n        }\n    }\n\n    suspend fun downloadBitmap(url: String){\n        withContext(Dispatchers.IO){\n            val result = CookiedFuel.get(url).awaitByteArray();\n            val bit: Bitmap = BitmapFactory.decodeByteArray(result, 0, result.size)\n            urlToBitmap!!.put(url, bit)\n        }\n    }\n\n\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/example/pangchat/ChatActivity.kt	(revision 8ee0a4d1eae9deefb67596172ac4c02ef6f3328b)
+++ app/src/main/java/com/example/pangchat/ChatActivity.kt	(date 1624415822311)
@@ -12,7 +12,6 @@
 import android.location.LocationManager
 import android.media.MediaRecorder
 import android.net.Uri
-import androidx.appcompat.app.AppCompatActivity
 import android.os.Bundle
 import android.os.Environment
 import android.provider.MediaStore
@@ -22,6 +21,7 @@
 import android.widget.LinearLayout
 import android.widget.TextView
 import android.widget.Toast
+import androidx.appcompat.app.AppCompatActivity
 import androidx.core.app.ActivityCompat
 import androidx.lifecycle.MutableLiveData
 import androidx.lifecycle.lifecycleScope
@@ -84,6 +84,9 @@
     override fun onCreate(savedInstanceState: Bundle?) {
         super.onCreate(savedInstanceState)
         setContentView(R.layout.activity_chat)
+
+        webSocketClient.context = this
+
         chatId = intent.getStringExtra("chatId")
         recyclerView = findViewById(R.id.chatRecyclerView)
         val chatinfo = findViewById<ImageView>(R.id.chatInfo)
