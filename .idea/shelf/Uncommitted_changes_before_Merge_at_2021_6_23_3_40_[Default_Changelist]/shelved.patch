Index: app/src/main/java/com/example/pangchat/ChatActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.pangchat\n\n\nimport android.app.Activity\nimport android.Manifest\nimport android.content.Context\nimport android.content.Intent\nimport android.content.pm.PackageManager\nimport android.location.Location\nimport android.location.LocationManager\nimport androidx.appcompat.app.AppCompatActivity\nimport android.os.Bundle\nimport android.provider.MediaStore\nimport android.util.Log\nimport android.view.View\nimport android.widget.ImageView\nimport android.widget.LinearLayout\nimport android.widget.TextView\nimport android.widget.Toast\nimport androidx.core.app.ActivityCompat\nimport androidx.lifecycle.MutableLiveData\nimport androidx.lifecycle.lifecycleScope\nimport androidx.recyclerview.widget.LinearLayoutManager\nimport androidx.recyclerview.widget.RecyclerView\nimport com.example.pangchat.chat.Chat\nimport com.example.pangchat.chat.data.ChatMessageInfo\nimport com.example.pangchat.chat.data.ChatRequest\nimport com.example.pangchat.chat.data.ChatResult\nimport com.example.pangchat.fragment.data.FileDataSource\nimport com.example.pangchat.fragment.data.Result\nimport com.example.pangchat.fragment.data.UploadResult\nimport com.example.pangchat.message.Message\nimport com.example.pangchat.message.MessageAdapter\nimport com.example.pangchat.message.data.MessageRequest\nimport com.example.pangchat.message.data.MessageResp\nimport com.example.pangchat.message.data.MessageResult\nimport com.example.pangchat.utils.CookiedFuel\nimport com.example.pangchat.websocketClient.webSocketClient\nimport com.github.kittinunf.fuel.core.BlobDataPart\nimport com.github.kittinunf.fuel.core.DataPart\nimport com.github.kittinunf.fuel.coroutines.awaitByteArray\nimport com.google.android.material.textfield.TextInputEditText\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.MainScope\nimport kotlinx.coroutines.launch\nimport kotlinx.coroutines.withContext\nimport java.io.InputStream\nimport java.util.*\nimport kotlin.collections.ArrayList\n\nclass ChatActivity : AppCompatActivity() {\n\n    private var chat: Chat? = null\n\n    private var data: LinkedList<Message?>? = null\n\n    private var messages: ArrayList<Message>? = null\n\n    private var chatId: String? = null\n\n    private var recyclerView: RecyclerView? = null\n\n    private var _uploadInfo: MutableLiveData<UploadResult> ?= null\n\n    // 相册选择回传码\n    val GALLERY_REQUEST_CODE = 1\n\n    //private lateinit var messages:LinkedList<Message?>\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_chat)\n\n        // TODO: 看看是否可拉取完再载入\n\n        chatId = intent.getStringExtra(\"chatId\")\n        recyclerView = findViewById(R.id.chatRecyclerView)\n        data = LinkedList()\n        messages = ArrayList()\n        recyclerView?.adapter = MessageAdapter(webSocketClient.userId!!, this, data)\n        // 取得对应聊天的内容\n        lifecycleScope.launch {\n            if (chatId != null) {\n                getChatAndMessage(chatId!!)\n                if(messages != null){\n                    for(message in messages!!){\n                        data!!.add(message)\n                    }\n                    recyclerView?.adapter?.notifyDataSetChanged()\n                    recyclerView?.scrollToPosition(messages!!.size - 1)\n                    runOnUiThread {\n                        val chatname = findViewById<TextView>(R.id.chatName)\n                        chatname.text = chat?.getChatName()\n                        // FIXME: 两人聊天应改成对方名称\n                        /*\n                        if(chat?.getIsGroup() == false){\n                            chatname.text = chat?.getChatName()\n                        }else{\n\n                            chatname.text = \"对方用户名\"\n                        }*/\n                    }\n                }\n            }\n        }\n\n        val linearLayoutManager = LinearLayoutManager(this)\n        linearLayoutManager.orientation = LinearLayoutManager.VERTICAL\n        recyclerView?.layoutManager = linearLayoutManager\n\n        // init()\n        val back = findViewById<ImageView>(R.id.chatBackward)\n        back.setOnClickListener { this.finish() }\n\n        val chatinfo = findViewById<ImageView>(R.id.chatInfo)\n        // TODO: 进入聊天室详情页面 activity\n        chatinfo.setOnClickListener {\n            val intent = Intent(this, ChatInfoActivity::class.java)\n            intent.putExtra(\"chatId\", chatId)\n            try {\n                startActivity(intent)\n                this.finish()\n            } catch (ActivityNotFoundException: Exception) {\n                Log.d(\"ImplicitIntents\", \"Can't handle this!\")\n            }\n        }\n\n        val chatInput = findViewById<TextInputEditText>(R.id.chatInput)\n\n        // TODO: set 各种 listener\n        val chatMoreAction = findViewById<LinearLayout>(R.id.chatMoreLayout)\n\n        // 假设第一个是发送视频\n\n\n        val videoSender = findViewById<ImageView>(R.id.imageView4)\n        videoSender.setOnClickListener{\n            // 修改头像\n            val pickIntent : Intent = Intent(Intent.ACTION_PICK,\n                MediaStore.Images.Media.EXTERNAL_CONTENT_URI);\n            pickIntent.setDataAndType(MediaStore.Images.Media.EXTERNAL_CONTENT_URI, \"video/*\");\n            startActivityForResult(pickIntent, GALLERY_REQUEST_CODE);\n        }\n\n\n        val chatAction = findViewById<ImageView>(R.id.chatAction)\n        chatAction.setOnClickListener {\n            if(chatInput.text?.isEmpty() == false){\n                Log.d(\"Debug\", \"not empty\")\n                lifecycleScope.launch {\n                    if (chatId != null) {\n                        sendMessage(chatInput.text.toString(), \"text\")\n                        recyclerView?.adapter?.notifyDataSetChanged()\n                        recyclerView?.scrollToPosition(data!!.size - 1)\n                        chatInput.text?.clear()\n                    }\n                }\n            }else{\n                if(chatMoreAction.visibility == View.VISIBLE){\n                    chatMoreAction.visibility = View.GONE\n                }else if(chatMoreAction.visibility == View.GONE) {\n                    chatMoreAction.visibility = View.VISIBLE\n                }\n            }\n        }\n\n        val chatLocation = findViewById<ImageView>(R.id.chatLocation)\n        chatLocation.setOnClickListener {\n\n            val location = getLocation()\n            if(location != null){\n                // TODO: 发送当前位置的Message\n\n                Toast.makeText(this, \"发送当前位置\", Toast.LENGTH_LONG).show()\n                lifecycleScope.launch {\n                    sendMessage(location.latitude.toString() + \";\" + location.longitude.toString(), \"location\")\n                }\n            }else{\n                Toast.makeText(this, \"获取当前地理位置失败！请打开GPS或网络后再试一次。\", Toast.LENGTH_LONG).show()\n            }\n        }\n    }\n\n    override fun onResume() {\n        super.onResume()\n        Log.d(\"back: \", \"resume\")\n    }\n\n    private fun getLocation(): Location?{\n        val locationManager = getSystemService(Context.LOCATION_SERVICE) as LocationManager\n        if (ActivityCompat.checkSelfPermission(                this,\n                Manifest.permission.ACCESS_FINE_LOCATION\n            ) != PackageManager.PERMISSION_GRANTED && ActivityCompat.checkSelfPermission(\n                this,\n                Manifest.permission.ACCESS_COARSE_LOCATION\n            ) != PackageManager.PERMISSION_GRANTED\n        ) {\n            ActivityCompat.requestPermissions(this, arrayOf(Manifest.permission.ACCESS_FINE_LOCATION, Manifest.permission.ACCESS_COARSE_LOCATION), 1)\n            return null\n        }\n\n        var location = locationManager.getLastKnownLocation(LocationManager.GPS_PROVIDER)\n            if (location == null) {\n                Toast.makeText(this, \"空位置\", Toast.LENGTH_LONG).show()\n                location = locationManager.getLastKnownLocation(LocationManager.NETWORK_PROVIDER)\n                if (location == null) {\n                    Toast.makeText(this, \"网络位置为空\", Toast.LENGTH_LONG).show()\n                }\n                else {\n                    Toast.makeText(this, \"使用网络位置\", Toast.LENGTH_LONG).show()\n                }\n            }\n        // }\n        return location\n    }\n\n\n    @Override\n    override fun onRequestPermissionsResult(\n        requestCode: Int,\n        permissions: Array<out String>,\n        grantResults: IntArray\n    ) {\n        super.onRequestPermissionsResult(requestCode, permissions, grantResults)\n        if(requestCode == 1){\n\n            for(index in permissions.indices){\n                if (grantResults[index] == PackageManager.PERMISSION_GRANTED) {\n                    Toast.makeText(this, \"\" + \"权限\" + permissions[index] + \"申请成功\", Toast.LENGTH_SHORT).show();\n                } else {\n                    Toast.makeText(this, \"\" + \"权限\" + permissions[index] + \"申请失败\", Toast.LENGTH_SHORT).show();\n                }\n            }\n        }\n    }\n\n\n    override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {\n        super.onActivityResult(requestCode, resultCode, data)\n        if (resultCode == Activity.RESULT_OK) {\n            if (requestCode == GALLERY_REQUEST_CODE){\n                try {\n                    //该uri是上一个Activity返回的\n                    val videoUri = data?.getData();\n                    if(videoUri!=null) {\n\n                        // 向服务器发送请求\n                        MainScope().launch {\n                            val splited = videoUri.lastPathSegment!!.split(\"/\");\n                            val inputVideo: InputStream\n                            withContext(Dispatchers.IO) {\n                                inputVideo = getContentResolver()?.openInputStream(videoUri)!!\n                            }\n\n                            uploadVideo(\n                                BlobDataPart(\n                                    inputVideo,\n                                    \"file\",\n                                    splited[splited.size - 1]\n                                )\n                            )\n\n                            withContext(Dispatchers.IO) {\n                                val result = CookiedFuel.get(_uploadInfo?.value!!.url).awaitByteArray();\n                                // bit = BitmapFactory.decodeByteArray(result, 0, result.size)\n                            }\n                            // imageView?.setImageBitmap(bit) // 必须放在IO外面\n\n\n//                            modifyAvatar(_uploadInfo.url)\n                        }\n                    }\n                } catch (e: Exception) {\n                    e.printStackTrace();\n                }\n\n            }\n        }\n    }\n\n\n    public fun setInput(text: String){\n        val chatInput = findViewById<TextInputEditText>(R.id.chatInput)\n        chatInput.setText(text)\n    }\n\n    suspend fun uploadVideo(file: DataPart) {\n        val fileDataSource = FileDataSource()\n\n        val result: Result<UploadResult>\n\n        withContext(Dispatchers.IO) {\n            result = fileDataSource.uploadFile(file)\n        }\n\n        if (result is Result.Success) {\n            // _uploadInfo = result.data\n        } else {\n            // TODO：抛出并解析异常\n        }\n    }\n\n\n\n    private suspend fun getChatAndMessage(chatId: String){\n        val chatRequest = ChatRequest()\n        val result: ChatResult<ChatMessageInfo>\n\n        withContext(Dispatchers.IO){\n            result = chatRequest.getMessagesOfChat(chatId)\n        }\n\n        if (result is ChatResult.Success) {\n            chat = result.data.chat\n            messages = result.data.records\n        } else {\n            Log.d(\"error: \", \"get chat info error\")\n            // TODO：抛出并解析异常\n        }\n    }\n\n    private suspend fun sendMessage(content: String, type: String){\n        val messageRequest = MessageRequest()\n        val result: MessageResult<MessageResp>\n\n        withContext(Dispatchers.IO) {\n            // FIXME: type\n            result = messageRequest.sendMessage(chatId!!, webSocketClient.userId!!, type, content)\n        }\n\n        if (result is MessageResult.Success) {\n            data?.add(result.data.message)\n        } else {\n            // TODO：抛出并解析异常\n        }\n    }\n\n    fun recallMessage(index: Int, messageId: String){\n        lifecycleScope.launch {\n            if(recallMessage(messageId)){\n                data?.get(index)?.setRecalled()\n                recyclerView?.adapter?.notifyDataSetChanged()\n            }\n        }\n    }\n\n    private suspend fun recallMessage(messageId: String) : Boolean{\n        val messageRequest = MessageRequest()\n        val result: MessageResult<MessageResp>\n\n        withContext(Dispatchers.IO) {\n            result = messageRequest.recallMessage(messageId)\n        }\n\n        return result is MessageResult.Success\n    }\n\n    fun deleteMessage(index: Int, messageId: String, userId: String){\n        lifecycleScope.launch {\n            if(deleteMessage(messageId, userId)){\n                data?.get(index)?.addBlocked(userId)\n                recyclerView?.adapter?.notifyDataSetChanged()\n            }\n        }\n    }\n\n    private suspend fun deleteMessage(messageId: String, userId: String): Boolean{\n        val messageRequest = MessageRequest()\n        val result: MessageResult<MessageResp>\n\n        withContext(Dispatchers.IO) {\n            result = messageRequest.deleteMessage(messageId, userId)\n        }\n\n        return result is MessageResult.Success\n    }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/example/pangchat/ChatActivity.kt	(revision eb4be59c2dd7554e1958ba4b6792c55c3caa6a0d)
+++ app/src/main/java/com/example/pangchat/ChatActivity.kt	(date 1624390785823)
@@ -1,14 +1,13 @@
 package com.example.pangchat
 
 
-import android.app.Activity
 import android.Manifest
+import android.app.Activity
 import android.content.Context
 import android.content.Intent
 import android.content.pm.PackageManager
 import android.location.Location
 import android.location.LocationManager
-import androidx.appcompat.app.AppCompatActivity
 import android.os.Bundle
 import android.provider.MediaStore
 import android.util.Log
@@ -17,6 +16,7 @@
 import android.widget.LinearLayout
 import android.widget.TextView
 import android.widget.Toast
+import androidx.appcompat.app.AppCompatActivity
 import androidx.core.app.ActivityCompat
 import androidx.lifecycle.MutableLiveData
 import androidx.lifecycle.lifecycleScope
@@ -244,6 +244,8 @@
                     val videoUri = data?.getData();
                     if(videoUri!=null) {
 
+
+
                         // 向服务器发送请求
                         MainScope().launch {
                             val splited = videoUri.lastPathSegment!!.split("/");
@@ -267,7 +269,6 @@
                             // imageView?.setImageBitmap(bit) // 必须放在IO外面
 
 
-//                            modifyAvatar(_uploadInfo.url)
                         }
                     }
                 } catch (e: Exception) {
